class Node{
    public:
    int data;
    Node *left, *right;
    Node(int data){
        this->data = data;
        left = right = NULL;
    }
    Node(int data, Node *left, Node *right){
        this->data = data;
        this->left = left;
        this->right = right;
    }
};
struct compare{
  bool operator()(Node *n1, Node *n2){
      return n1->data > n2->data;
  }  
};
class Solution
{
	public:
	    void traversal(Node *root, string code, vector<string> &ans){
	        if(!root->left && !root->right) ans.push_back(code);
	        else{
	            traversal(root->left, code + "0", ans);
	            traversal(root->right, code + "1", ans);
	        }
	    }
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    priority_queue<Node*, vector<Node*>, compare> pq;
		    vector<string> res;
		    for(int i=0;i<N;i++){
		        pq.push(new Node(f[i]));
		    }
		    while(pq.size() > 1){
		        Node *topfN = pq.top(); pq.pop();
		        Node *topsN = pq.top(); pq.pop();
		        pq.push(new Node(topfN->data + topsN->data, topfN, topsN));
		    }
		    traversal(pq.top(), "", res);
		    return res;
		}
};